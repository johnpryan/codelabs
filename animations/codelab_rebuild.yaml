name: Add animation effects to your Flutter app
steps:
  - name: step_01
    steps:
      - name: Remove generated code
        rmdir: step_01
      - name: Create project
        flutter: create --empty quiz
      - name: Strip DEVELOPMENT_TEAM
        strip-lines-containing: DEVELOPMENT_TEAM =
        path: quiz/ios/Runner.xcodeproj/project.pbxproj
      - name: Remove README
        rm: quiz/README.md
      - name: Ignore platform project files
        path: quiz/.gitignore
        patch-u: |
          --- a/animations/step_01/.gitignore
          +++ b/animations/step_01/.gitignore
          @@ -41,3 +41,13 @@ app.*.map.json
           /android/app/debug
           /android/app/profile
           /android/app/release
          +
          +# Since this is a codelab, ignore all target platform project files
          +# Readers are instructed to run 'flutter create .' before starting the
          +# codelab.
          +android/
          +ios/
          +linux/
          +macos/
          +web/
          +windows/
      - name: Replace pubspec.yaml
        path: quiz/pubspec.yaml
        replace-contents: |
          name: quiz
          description: A quiz app for demonstrating animation effects in Flutter
          publish_to: "none"
          version: 1.0.0

          environment:
            sdk: ^3.2.0

          dependencies:
            animations: ^2.0.0
            flutter:
              sdk: flutter

          dev_dependencies:
            flutter_test:
              sdk: flutter
            flutter_lints: ^4.0.0


          flutter:
            uses-material-design: true
      - name: Replace analysis_options.yaml
        path: quiz/analysis_options.yaml
        replace-contents: |
          include: package:flutter_lints/flutter.yaml

          linter:
            rules:
              prefer_const_constructors: false
              prefer_const_constructors_in_immutables: false
              prefer_const_declarations: false
              prefer_const_literals_to_create_immutables: false
              annotate_overrides: false
      - name: Create the HomeScreen
        path: quiz/lib/home_screen.dart
        replace-contents: |
          import 'package:flutter/material.dart';
          import 'question_screen.dart';
        
          class HomeScreen extends StatelessWidget {
            const HomeScreen({super.key});
        
            @override
            Widget build(BuildContext context) {
              return Scaffold(
                body: Center(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Text(
                        '✏️',
                        style: Theme.of(context).textTheme.displayLarge,
                      ),
                      Text(
                        'Flutter Quiz',
                        style: Theme.of(context).textTheme.displayLarge!.copyWith(
                            fontWeight: FontWeight.w700,
                            color: Theme.of(context).colorScheme.onPrimaryFixedVariant),
                      ),
                      ElevatedButton(
                        onPressed: () {
                          // Show the question screen to start the game
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (BuildContext context) {
                                return QuestionScreen();
                              },
                            ),
                          );
                        },
                        child: Text('New Game'),
                      ),
                    ],
                  ),
                ),
              );
            }
          }
      - name: Show the HomeScreen in MaterialApp
        path: quiz/lib/main.dart
        replace-contents: |
          import 'package:flutter/material.dart';
          
          import 'home_screen.dart';
          
          void main() {
            runApp(MainApp());
          }
          
          class MainApp extends StatelessWidget {
            const MainApp({super.key});
          
            @override
            Widget build(BuildContext context) {
              return MaterialApp(
                debugShowCheckedModeBanner: false,
                theme: ThemeData(
                  colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),
                  useMaterial3: true,
                ),
                home: HomeScreen(),
              );
            }
          }
      - name: Create the Model
        path: quiz/lib/model.dart
        replace-contents: |
          import 'dart:math' as math;
          
          class Question {
            final String question;
            final List<String> possibleAnswers;
            final int correctAnswer;
            Question(this.question, this.possibleAnswers, this.correctAnswer);
          }
          
          class QuestionBank {
            final List<Question> _questions = _createQuestions();
          
            bool get hasNextQuestion => _questions.isNotEmpty;
            int get remainingQuestions => _questions.length;
          
            Question? getRandomQuestion() {
              if (_questions.isEmpty) {
                return null;
              }
          
              var i = math.Random().nextInt(_questions.length);
              var question = _questions[i];
          
              _questions.removeAt(i);
              return question;
            }
          }
          
          List<Question> _createQuestions() {
            return [
              Question(
                'What class used to create custom explicit animations in Flutter?',
                [
                  'AnimationController',
                  'AnimatedWidget',
                  'AnimatedBuilder',
                  'Tween',
                ],
                0,
              ),
              Question(
                'Which widget is used to rebuild its child whenever an animation changes?',
                [
                  'AnimatedContainer',
                  'AnimatedBuilder',
                  'AnimatedSwitcher',
                  'AnimatedOpacity',
                ],
                1,
              ),
              Question(
                'What class is used to define the start and end values for an animation?',
                [
                  'Tween',
                  'Curve',
                  'AnimationController',
                  'AnimatedWidget',
                ],
                0,
              ),
            ];
          }
      - name: Create the ViewModel
        path: quiz/lib/view_model.dart
        replace-contents: |
          import 'package:flutter/cupertino.dart';
          import 'model.dart';
          
          class QuizViewModel extends ChangeNotifier {
            final QuestionBank _questionBank = QuestionBank();
            final VoidCallback onGameOver;
            late final int totalQuestions;
            Question? currentQuestion;
            int answeredQuestionCount = 0;
            int score = 0;
            bool didAnswerQuestion = false;
            bool get hasNextQuestion => answeredQuestionCount < totalQuestions;
          
            QuizViewModel({required this.onGameOver}) {
              totalQuestions = _questionBank.remainingQuestions;
              getNextQuestion();
            }
          
            void getNextQuestion() {
              if (_questionBank.hasNextQuestion) {
                currentQuestion = _questionBank.getRandomQuestion();
                answeredQuestionCount++;
              }
          
              didAnswerQuestion = false;
          
              notifyListeners();
            }
          
            void checkAnswer(int selectedIndex) {
              if (!didAnswerQuestion && currentQuestion?.correctAnswer == selectedIndex) {
                score++;
              }
          
              didAnswerQuestion = true;
          
              if (!_questionBank.hasNextQuestion) {
                onGameOver();
              }
          
              notifyListeners();
            }
          }
      - name: Create the QuestionScreen
        path: quiz/lib/question_screen.dart
        replace-contents: |
          import 'package:flutter/material.dart';
          import 'view_model.dart';
          
          class QuestionScreen extends StatefulWidget {
            const QuestionScreen({super.key});
          
            @override
            State<QuestionScreen> createState() => _QuestionScreenState();
          }
          
          class _QuestionScreenState extends State<QuestionScreen> {
            late final QuizViewModel viewModel =
                QuizViewModel(onGameOver: _handleGameOver);
          
            @override
            Widget build(BuildContext context) {
              return ListenableBuilder(
                listenable: viewModel,
                builder: (context, child) {
                  return Scaffold(
                    appBar: AppBar(
                      actions: [
                        TextButton(
                          onPressed:
                              viewModel.hasNextQuestion && viewModel.didAnswerQuestion
                                  ? () {
                                      viewModel.getNextQuestion();
                                    }
                                  : null,
                          child: const Text('Next'),
                        )
                      ],
                    ),
                    body: Center(
                      child: Column(
                        children: [
                          QuestionCard(question: viewModel.currentQuestion?.question),
                          Expanded(
                            child: AnswerCards(
                              onTapped: (index) {
                                viewModel.checkAnswer(index);
                              },
                              answers: viewModel.currentQuestion?.possibleAnswers ?? [],
                              correctAnswer: viewModel.didAnswerQuestion
                                  ? viewModel.currentQuestion?.correctAnswer
                                  : null,
                            ),
                          ),
                          StatusBar(viewModel: viewModel),
                        ],
                      ),
                    ),
                  );
                },
              );
            }
          
            void _handleGameOver() {
              showDialog(
                barrierDismissible: false,
                context: context,
                builder: (context) {
                  return AlertDialog(
                    title: Text('Game Over!'),
                    content: Text('Score: ${viewModel.score}'),
                    actions: [
                      TextButton(
                        onPressed: () {
                          Navigator.popUntil(context, (route) => route.isFirst);
                        },
                        child: Text('OK'),
                      ),
                    ],
                  );
                },
              );
            }
          }
          
          class QuestionCard extends StatelessWidget {
            final String? question;
          
            const QuestionCard({
              required this.question,
              super.key,
            });
          
            @override
            Widget build(BuildContext context) {
              return Card(
                elevation: 4,
                child: Padding(
                  padding: EdgeInsets.all(16.0),
                  child: Text(
                    question ?? "",
                    style: Theme.of(context).textTheme.displaySmall,
                  ),
                ),
              );
            }
          }
          
          class AnswerCards extends StatelessWidget {
            final List<String> answers;
            final ValueChanged<int> onTapped;
            final int? correctAnswer;
          
            const AnswerCards({
              required this.answers,
              required this.onTapped,
              required this.correctAnswer,
              super.key,
            });
          
            @override
            Widget build(BuildContext context) {
              return GridView.count(
                crossAxisCount: 2,
                childAspectRatio: 5 / 2,
                children: List.generate(answers.length, (index) {
                  var color = Theme.of(context).colorScheme.primaryContainer;
                  if (correctAnswer == index) {
                    color = Theme.of(context).colorScheme.tertiaryContainer;
                  }
                  return Card.filled(
                    key: ValueKey(answers[index]),
                    color: color,
                    elevation: 2,
                    margin: EdgeInsets.all(8),
                    clipBehavior: Clip.hardEdge,
                    child: InkWell(
                      onTap: () => onTapped(index),
                      child: Padding(
                        padding: EdgeInsets.all(16.0),
                        child: Center(
                          child: Text(
                            answers.length > index ? answers[index] : "",
                            style: Theme.of(context).textTheme.titleMedium,
                            overflow: TextOverflow.clip,
                          ),
                        ),
                      ),
                    ),
                  );
                }),
              );
            }
          }
          
          class StatusBar extends StatelessWidget {
            final QuizViewModel viewModel;
          
            const StatusBar({required this.viewModel, super.key});
          
            @override
            Widget build(BuildContext context) {
              return Card(
                elevation: 4,
                child: Padding(
                  padding: EdgeInsets.all(8.0),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceAround,
                    children: [
                      Text(
                        'Question ${viewModel.answeredQuestionCount} / ${viewModel.totalQuestions}',
                        style: Theme.of(context).textTheme.titleLarge,
                      ),
                      Text(
                        'Score: ${viewModel.score}',
                        style: Theme.of(context).textTheme.titleLarge,
                      ),
                    ],
                  ),
                ),
              );
            }
          }
      # - name: Build web app
      #   path: patterns_codelab
      #   flutter: build web
      - name: Fetch dependencies
        path: quiz
        dart: pub get
      - name: Run Dart Analzyer
        path: quiz
        dart: analyze --fatal-infos
      # - name: Check formatting
      #   path: quiz
      #   dart: format --set-exit-if-changed
      - name: Copy step_01
        copydir:
          from: quiz
          to: step_01
  - name: step_02
    steps:
      - name: Create scoreboard.dart
        path: quiz/lib/scoreboard.dart
        replace-contents: |
          import 'package:flutter/material.dart';
          
          class Scoreboard extends StatelessWidget {
            final int score;
            final int totalQuestions;
          
            const Scoreboard({
              super.key,
              required this.score,
              required this.totalQuestions,
            });
          
            @override
            Widget build(BuildContext context) {
              return Padding(
                padding: const EdgeInsets.all(8.0),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    for (var i = 0; i < totalQuestions; i++)
                      Icon(
                        Icons.star,
                        size: 50,
                        color:
                            score < i + 1 ? Colors.grey.shade400 : Colors.yellow.shade700,
                      )
                  ],
                ),
              );
            }
          }
      - name: Use Scoreboard widget
        path: quiz/lib/question_screen.dart
        patch-u: |
          --- a/animations/step_01/lib/question_screen.dart
          +++ b/animations/step_01/lib/question_screen.dart
          @@ -1,4 +1,5 @@
           import 'package:flutter/material.dart';
          +import 'scoreboard.dart';
           import 'view_model.dart';
           
           class QuestionScreen extends StatefulWidget {
          @@ -161,13 +162,9 @@ class StatusBar extends StatelessWidget {
                   child: Row(
                     mainAxisAlignment: MainAxisAlignment.spaceAround,
                     children: [
          -            Text(
          -              'Question ${viewModel.answeredQuestionCount} / ${viewModel.totalQuestions}',
          -              style: Theme.of(context).textTheme.titleLarge,
          -            ),
          -            Text(
          -              'Score: ${viewModel.score}',
          -              style: Theme.of(context).textTheme.titleLarge,
          +            Scoreboard(
          +              score: viewModel.score,
          +              totalQuestions: viewModel.totalQuestions,
                       ),
                     ],
                   ),
      - name: Use an ImplicitlyAnimatedWidget
        path: quiz/lib/scoreboard.dart
        patch-u: |
          --- a/animations/step_02/lib/scoreboard.dart
          +++ b/animations/step_02/lib/scoreboard.dart
          @@ -18,14 +18,33 @@ class Scoreboard extends StatelessWidget {
                   mainAxisAlignment: MainAxisAlignment.center,
                   children: [
                     for (var i = 0; i < totalQuestions; i++)
          -            Icon(
          -              Icons.star,
          -              size: 50,
          -              color:
          -                  score < i + 1 ? Colors.grey.shade400 : Colors.yellow.shade700,
          +            AnimatedStar(
          +              isActive: score > i,
                       )
                   ],
                 ),
               );
             }
           }
          +
          +class AnimatedStar extends StatelessWidget {
          +  final bool isActive;
          +  final Duration _duration = const Duration(milliseconds: 1000);
          +  final Color _deactivatedColor = Colors.grey.shade400;
          +  final Color _activatedColor = Colors.yellow.shade700;
          +
          +  AnimatedStar({super.key, required this.isActive});
          +
          +  @override
          +  Widget build(BuildContext context) {
          +    return AnimatedScale(
          +      scale: isActive ? 1.0 : 0.5,
          +      duration: _duration,
          +      child: Icon(
          +        Icons.star,
          +        size: 50,
          +        color: isActive ? _activatedColor : _deactivatedColor,
          +      ),
          +    );
          +  }
          +}
      - name: Use a TweenAnimationBuilder to change the color
        path: quiz/lib/scoreboard.dart
        patch-u: |
          --- a/animations/step_02/lib/scoreboard.dart
          +++ b/animations/step_02/lib/scoreboard.dart
          @@ -40,10 +40,19 @@ class AnimatedStar extends StatelessWidget {
               return AnimatedScale(
                 scale: isActive ? 1.0 : 0.5,
                 duration: _duration,
          -      child: Icon(
          -        Icons.star,
          -        size: 50,
          -        color: isActive ? _activatedColor : _deactivatedColor,
          +      child: TweenAnimationBuilder(
          +        duration: _duration,
          +        tween: ColorTween(
          +          begin: _deactivatedColor,
          +          end: isActive ? _activatedColor : _deactivatedColor,
          +        ),
          +        builder: (context, value, child) {
          +          return Icon(
          +            Icons.star,
          +            size: 50,
          +            color: value,
          +          );
          +        },
                 ),
               );
             }
      - name: Use a Curve
        path: quiz/lib/scoreboard.dart
        patch-u: |
          --- a/animations/step_02/lib/scoreboard.dart
          +++ b/animations/step_02/lib/scoreboard.dart
          @@ -32,6 +32,7 @@ class AnimatedStar extends StatelessWidget {
             final Duration _duration = const Duration(milliseconds: 1000);
             final Color _deactivatedColor = Colors.grey.shade400;
             final Color _activatedColor = Colors.yellow.shade700;
          +  final Curve _curve = Curves.elasticOut;
           
             AnimatedStar({super.key, required this.isActive});
           
          @@ -39,8 +40,10 @@ class AnimatedStar extends StatelessWidget {
             Widget build(BuildContext context) {
               return AnimatedScale(
                 scale: isActive ? 1.0 : 0.5,
          +      curve: _curve,
                 duration: _duration,
                 child: TweenAnimationBuilder(
          +        curve: _curve,
                   duration: _duration,
                   tween: ColorTween(
                     begin: _deactivatedColor,
          
      - name: Copy step_02
        copydir:
          from: quiz
          to: step_02
  - name: Cleanup
    rmdir: quiz
